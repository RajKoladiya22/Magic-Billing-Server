
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  email: 'email',
  password: 'password',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TokenScalarFieldEnum = {
  id: 'id',
  token: 'token',
  expiryDate: 'expiryDate',
  revoked: 'revoked',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.UserDetailScalarFieldEnum = {
  id: 'id',
  companyName: 'companyName',
  gstNumber: 'gstNumber',
  panNumber: 'panNumber',
  businessEmail: 'businessEmail',
  phoneNumber: 'phoneNumber',
  alternativePhoneNumber: 'alternativePhoneNumber',
  website: 'website',
  billingAddress: 'billingAddress',
  shippingAddress: 'shippingAddress',
  signatureImages: 'signatureImages',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.UserBankScalarFieldEnum = {
  id: 'id',
  bankName: 'bankName',
  accountNumber: 'accountNumber',
  ifscCode: 'ifscCode',
  branch: 'branch',
  accountType: 'accountType',
  openingBalance: 'openingBalance',
  upiId: 'upiId',
  notes: 'notes',
  isDefault: 'isDefault',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.NoteAndTermsScalarFieldEnum = {
  id: 'id',
  note: 'note',
  terms: 'terms',
  whatsAppMessage: 'whatsAppMessage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.CustomColumnScalarFieldEnum = {
  id: 'id',
  name: 'name',
  label: 'label',
  dataType: 'dataType',
  isMultiSelect: 'isMultiSelect',
  options: 'options',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  email: 'email',
  phone: 'phone',
  billingAddress: 'billingAddress',
  shippingAddress: 'shippingAddress',
  companyDetails: 'companyDetails',
  preferences: 'preferences',
  details: 'details',
  tags: 'tags',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  customColumnId: 'customColumnId'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  hsnCode: 'hsnCode',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  type: 'type',
  name: 'name',
  sellingPrice: 'sellingPrice',
  purchasePrice: 'purchasePrice',
  taxRate: 'taxRate',
  hsnCode: 'hsnCode',
  sacCode: 'sacCode',
  barcode: 'barcode',
  isActive: 'isActive',
  isTaxable: 'isTaxable',
  onlinestore: 'onlinestore',
  notForSale: 'notForSale',
  default: 'default',
  images: 'images',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  categoryId: 'categoryId',
  unitId: 'unitId'
};

exports.Prisma.UnitScalarFieldEnum = {
  id: 'id',
  name: 'name',
  abbreviation: 'abbreviation',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BillScalarFieldEnum = {
  id: 'id',
  type: 'type',
  documentNumber: 'documentNumber',
  documentDate: 'documentDate',
  dueDate: 'dueDate',
  invoice: 'invoice',
  billOfSupply: 'billOfSupply',
  discountOn: 'discountOn',
  dispatchAddress: 'dispatchAddress',
  shippingAddress: 'shippingAddress',
  signature: 'signature',
  reference: 'reference',
  note: 'note',
  term: 'term',
  discount: 'discount',
  charges: 'charges',
  attachments: 'attachments',
  TDS: 'TDS',
  TCS: 'TCS',
  RCM: 'RCM',
  billStatus: 'billStatus',
  billSummary: 'billSummary',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  customerId: 'customerId'
};

exports.Prisma.BillItemScalarFieldEnum = {
  id: 'id',
  description: 'description',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  discount: 'discount',
  discountType: 'discountType',
  cgstAmount: 'cgstAmount',
  sgstAmount: 'sgstAmount',
  igstAmount: 'igstAmount',
  itemPrice: 'itemPrice',
  itemPriceWithTax: 'itemPriceWithTax',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  billId: 'billId',
  productId: 'productId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.ColumnType = exports.$Enums.ColumnType = {
  TEXT: 'TEXT',
  NUMBER: 'NUMBER',
  DATE: 'DATE',
  SELECT: 'SELECT'
};

exports.CustomerType = exports.$Enums.CustomerType = {
  CUSTOMER: 'CUSTOMER',
  VENDOR: 'VENDOR'
};

exports.ProductType = exports.$Enums.ProductType = {
  PRODUCT: 'PRODUCT',
  SERVICE: 'SERVICE'
};

exports.BillType = exports.$Enums.BillType = {
  INVOICE: 'INVOICE',
  QUOTATION: 'QUOTATION',
  SALES_ORDER: 'SALES_ORDER',
  DEBIT_NOTE: 'DEBIT_NOTE',
  CREDIT_NOTE: 'CREDIT_NOTE'
};

exports.DiscountOnType = exports.$Enums.DiscountOnType = {
  UNIT_PRICE: 'UNIT_PRICE',
  PRICE_WITH_TAX: 'PRICE_WITH_TAX',
  PRICE_WITHOUT_TAX: 'PRICE_WITHOUT_TAX',
  TOTAL_AMOUNT: 'TOTAL_AMOUNT',
  NET_AMOUNT: 'NET_AMOUNT'
};

exports.BillStatusType = exports.$Enums.BillStatusType = {
  DRAFT: 'DRAFT',
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  CANCELLED: 'CANCELLED',
  COMPLETED: 'COMPLETED'
};

exports.DiscountType = exports.$Enums.DiscountType = {
  FLAT: 'FLAT',
  PERCENTAGE: 'PERCENTAGE'
};

exports.Prisma.ModelName = {
  User: 'User',
  Token: 'Token',
  UserDetail: 'UserDetail',
  UserBank: 'UserBank',
  NoteAndTerms: 'NoteAndTerms',
  CustomColumn: 'CustomColumn',
  Customer: 'Customer',
  Category: 'Category',
  Product: 'Product',
  Unit: 'Unit',
  Bill: 'Bill',
  BillItem: 'BillItem'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
